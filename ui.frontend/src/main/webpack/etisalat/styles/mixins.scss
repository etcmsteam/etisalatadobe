@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
/*@inculde
.test{  
    @include truncate(40px);
 }
 */

//media query
@mixin respond-to-max($width) {
	@media screen and (max-width: $width) {
		@content;
	}
}

@mixin respond-to-min($width) {
	@media screen and (min-width: $width) {
		@content;
	}
}
//@include respond-to-min($tablet){ }
//@include respond-to-max($tablet){ }

// Clearfix 

@mixin clearFix(){
  &:before,
  &:after{
    content: " "; 
    display: table; 
  }

  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  &{
    *zoom: 1;
  }
}

//container st 
/* .container{
    @include clearFix();
    .column{ float: left;}
} */

@mixin push--auto {
	margin:{ left: auto; right: auto;}
}
/* @include push--auto() */


@mixin pseudo($display: block, $pos: absolute, $content: '') {
	content: $content;
	display: $display;
	position: $pos;
}
/* @include pseudo() */


@mixin input-placeholder {
	&.placeholder {
		@content;
	}

	&:-moz-placeholder {
		@content;
	}

	&::-moz-placeholder {
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}

	&::-webkit-input-placeholder {
		@content;
	}
}
/* @include input-placeholder() */

@mixin align-image($position) {
	img {
		object-position: $position;
	}
}
/* @include align-image() */

//font size PX into REM
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}
/*h1 { @include fontSize(32px); } */

@function toRem($value) {
    $remValue: ($value / 16) + rem;	
    @return $remValue;
}

// .box {
//     width: toRem(400);
//     height: toRem(400);
// }